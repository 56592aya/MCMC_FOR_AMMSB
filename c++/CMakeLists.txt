cmake_minimum_required(VERSION 2.8)

SET(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Werror")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-local-typedefs")

set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -g3")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -g")

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99")

SET(CMAKE_VERBOSE_MAKEFILE ON)

if (MCMC_BUILD_MODE STREQUAL "DISTR")
  MESSAGE("########################## MODE IS DISTR")
  SET (MCMC_BUILD_MODE_SEQ OFF CACHE BOOL "" FORCE)
  SET (MCMC_BUILD_MODE_DISTR ON CACHE BOOL "" FORCE)
else()
  MESSAGE("########################## MODE IS SEQ")
  SET (MCMC_BUILD_MODE_SEQ ON CACHE BOOL "" FORCE)
  SET (MCMC_BUILD_MODE_DISTR OFF CACHE BOOL "" FORCE)
endif()

SET(MCMC_ENABLE_OPENMP ${MCMC_BUILD_MODE_DISTR} CACHE BOOL "Enable the use of OpenMP")

option( MCMC_SINGLE_PRECISION  "Enable single precision" ON )

######################################
## CONDITIONAL OPTION ON DISTR MODE ##
######################################
# SET(MCMC_ENABLE_OPENMP ${MCMC_BUILD_MODE_DISTR} CACHE BOOL "Enable the use of OpenMP" FORCE)
SET(MCMC_ENABLE_OPENMP ${MCMC_BUILD_MODE_DISTR} CACHE BOOL "Enable the use of OpenMP")
if (MCMC_ENABLE_OPENMP)
  find_package(OpenMP)
  if (OPENMP_FOUND)
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set (CMAKE_LINKER_FLAGS "${CMAKE_LINKER_FLAGS} ${OpenMP_CXX_FLAGS}")
    set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_CXX_FLAGS}")
  endif(OPENMP_FOUND)
else(MCMC_ENABLE_OPENMP)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unknown-pragmas")
endif(MCMC_ENABLE_OPENMP)

SET (MCMC_ENABLE_RDMA ${MCMC_BUILD_MODE_DISTR} CACHE BOOL "Enable use of RDMA DKVStore" FORCE)

SET (MCMC_ENABLE_DISTRIBUTED ${MCMC_BUILD_MODE_DISTR} CACHE BOOL "Enable distr code")

option (MCMC_ENABLE_RAMCLOUD "Enable use of RAMCLOUD DKVStore" OFF)
if (MCMC_ENABLE_RAMCLOUD)
  find_package(RamCloud REQUIRED)
endif(MCMC_ENABLE_RAMCLOUD)

option( MCMC_XORSHIFT_ENABLE "Enable Random:xorshift" ON )
if (MCMC_XORSHIFT_ENABLE)
else(MCMC_XORSHIFT_ENABLE)
  SET(MCMC_RANDOM_SYSTEM "1")
endif(MCMC_XORSHIFT_ENABLE)

add_subdirectory(src)
add_subdirectory(apps)
add_subdirectory(test)

